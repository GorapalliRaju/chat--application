{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar eio = require('engine.io-client');\nvar Socket = require('./socket');\nvar Emitter = require('component-emitter');\nvar parser = require('socket.io-parser');\nvar on = require('./on');\nvar bind = require('component-bind');\nvar debug = require('debug')('socket.io-client:manager');\nvar indexOf = require('indexof');\nvar Backoff = require('backo2');\n\n/**\n * IE6+ hasOwnProperty\n */\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Module exports\n */\n\nmodule.exports = Manager;\n\n/**\n * `Manager` constructor.\n *\n * @param {String} engine instance or engine uri/opts\n * @param {Object} options\n * @api public\n */\n\nfunction Manager(uri, opts) {\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = undefined;\n  }\n  opts = opts || {};\n  opts.path = opts.path || '/socket.io';\n  this.nsps = {};\n  this.subs = [];\n  this.opts = opts;\n  this.reconnection(opts.reconnection !== false);\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\n  this.backoff = new Backoff({\n    min: this.reconnectionDelay(),\n    max: this.reconnectionDelayMax(),\n    jitter: this.randomizationFactor()\n  });\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n  this.readyState = 'closed';\n  this.uri = uri;\n  this.connecting = [];\n  this.lastPing = null;\n  this.encoding = false;\n  this.packetBuffer = [];\n  this.encoder = new parser.Encoder();\n  this.decoder = new parser.Decoder();\n  this.autoConnect = opts.autoConnect !== false;\n  if (this.autoConnect) this.open();\n}\n\n/**\n * Propagate given event to sockets and emit on `this`\n *\n * @api private\n */\n\nManager.prototype.emitAll = function () {\n  this.emit.apply(this, arguments);\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\n    }\n  }\n};\n\n/**\n * Update `socket.id` of all sockets\n *\n * @api private\n */\n\nManager.prototype.updateSocketIds = function () {\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].id = this.engine.id;\n    }\n  }\n};\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Manager.prototype);\n\n/**\n * Sets the `reconnection` config.\n *\n * @param {Boolean} true/false if it should automatically reconnect\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnection = function (v) {\n  if (!arguments.length) return this._reconnection;\n  this._reconnection = !!v;\n  return this;\n};\n\n/**\n * Sets the reconnection attempts config.\n *\n * @param {Number} max reconnection attempts before giving up\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionAttempts = function (v) {\n  if (!arguments.length) return this._reconnectionAttempts;\n  this._reconnectionAttempts = v;\n  return this;\n};\n\n/**\n * Sets the delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelay = function (v) {\n  if (!arguments.length) return this._reconnectionDelay;\n  this._reconnectionDelay = v;\n  this.backoff && this.backoff.setMin(v);\n  return this;\n};\nManager.prototype.randomizationFactor = function (v) {\n  if (!arguments.length) return this._randomizationFactor;\n  this._randomizationFactor = v;\n  this.backoff && this.backoff.setJitter(v);\n  return this;\n};\n\n/**\n * Sets the maximum delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelayMax = function (v) {\n  if (!arguments.length) return this._reconnectionDelayMax;\n  this._reconnectionDelayMax = v;\n  this.backoff && this.backoff.setMax(v);\n  return this;\n};\n\n/**\n * Sets the connection timeout. `false` to disable\n *\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.timeout = function (v) {\n  if (!arguments.length) return this._timeout;\n  this._timeout = v;\n  return this;\n};\n\n/**\n * Starts trying to reconnect if reconnection is enabled and we have not\n * started reconnecting yet\n *\n * @api private\n */\n\nManager.prototype.maybeReconnectOnOpen = function () {\n  // Only try to reconnect if it's the first time we're connecting\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\n    // keeps reconnection from firing twice for the same reconnection loop\n    this.reconnect();\n  }\n};\n\n/**\n * Sets the current transport `socket`.\n *\n * @param {Function} optional, callback\n * @return {Manager} self\n * @api public\n */\n\nManager.prototype.open = Manager.prototype.connect = function (fn, opts) {\n  debug('readyState %s', this.readyState);\n  if (~this.readyState.indexOf('open')) return this;\n  debug('opening %s', this.uri);\n  this.engine = eio(this.uri, this.opts);\n  var socket = this.engine;\n  var self = this;\n  this.readyState = 'opening';\n  this.skipReconnect = false;\n\n  // emit `open`\n  var openSub = on(socket, 'open', function () {\n    self.onopen();\n    fn && fn();\n  });\n\n  // emit `connect_error`\n  var errorSub = on(socket, 'error', function (data) {\n    debug('connect_error');\n    self.cleanup();\n    self.readyState = 'closed';\n    self.emitAll('connect_error', data);\n    if (fn) {\n      var err = new Error('Connection error');\n      err.data = data;\n      fn(err);\n    } else {\n      // Only do this if there is no fn to handle the error\n      self.maybeReconnectOnOpen();\n    }\n  });\n\n  // emit `connect_timeout`\n  if (false !== this._timeout) {\n    var timeout = this._timeout;\n    debug('connect attempt will timeout after %d', timeout);\n\n    // set timer\n    var timer = setTimeout(function () {\n      debug('connect attempt timed out after %d', timeout);\n      openSub.destroy();\n      socket.close();\n      socket.emit('error', 'timeout');\n      self.emitAll('connect_timeout', timeout);\n    }, timeout);\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n  this.subs.push(openSub);\n  this.subs.push(errorSub);\n  return this;\n};\n\n/**\n * Called upon transport open.\n *\n * @api private\n */\n\nManager.prototype.onopen = function () {\n  debug('open');\n\n  // clear old subs\n  this.cleanup();\n\n  // mark as open\n  this.readyState = 'open';\n  this.emit('open');\n\n  // add new subs\n  var socket = this.engine;\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\n  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\n  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\n};\n\n/**\n * Called upon a ping.\n *\n * @api private\n */\n\nManager.prototype.onping = function () {\n  this.lastPing = new Date();\n  this.emitAll('ping');\n};\n\n/**\n * Called upon a packet.\n *\n * @api private\n */\n\nManager.prototype.onpong = function () {\n  this.emitAll('pong', new Date() - this.lastPing);\n};\n\n/**\n * Called with data.\n *\n * @api private\n */\n\nManager.prototype.ondata = function (data) {\n  this.decoder.add(data);\n};\n\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\nManager.prototype.ondecoded = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon socket error.\n *\n * @api private\n */\n\nManager.prototype.onerror = function (err) {\n  debug('error', err);\n  this.emitAll('error', err);\n};\n\n/**\n * Creates a new socket for the given `nsp`.\n *\n * @return {Socket}\n * @api public\n */\n\nManager.prototype.socket = function (nsp, opts) {\n  var socket = this.nsps[nsp];\n  if (!socket) {\n    socket = new Socket(this, nsp, opts);\n    this.nsps[nsp] = socket;\n    var self = this;\n    socket.on('connecting', onConnecting);\n    socket.on('connect', function () {\n      socket.id = self.engine.id;\n    });\n    if (this.autoConnect) {\n      // manually call here since connecting evnet is fired before listening\n      onConnecting();\n    }\n  }\n  function onConnecting() {\n    if (!~indexOf(self.connecting, socket)) {\n      self.connecting.push(socket);\n    }\n  }\n  return socket;\n};\n\n/**\n * Called upon a socket close.\n *\n * @param {Socket} socket\n */\n\nManager.prototype.destroy = function (socket) {\n  var index = indexOf(this.connecting, socket);\n  if (~index) this.connecting.splice(index, 1);\n  if (this.connecting.length) return;\n  this.close();\n};\n\n/**\n * Writes a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nManager.prototype.packet = function (packet) {\n  debug('writing packet %j', packet);\n  var self = this;\n  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\n  if (!self.encoding) {\n    // encode, then write to engine with result\n    self.encoding = true;\n    this.encoder.encode(packet, function (encodedPackets) {\n      for (var i = 0; i < encodedPackets.length; i++) {\n        self.engine.write(encodedPackets[i], packet.options);\n      }\n      self.encoding = false;\n      self.processPacketQueue();\n    });\n  } else {\n    // add packet to the queue\n    self.packetBuffer.push(packet);\n  }\n};\n\n/**\n * If packet buffer is non-empty, begins encoding the\n * next packet in line.\n *\n * @api private\n */\n\nManager.prototype.processPacketQueue = function () {\n  if (this.packetBuffer.length > 0 && !this.encoding) {\n    var pack = this.packetBuffer.shift();\n    this.packet(pack);\n  }\n};\n\n/**\n * Clean up transport subscriptions and packet buffer.\n *\n * @api private\n */\n\nManager.prototype.cleanup = function () {\n  debug('cleanup');\n  var subsLength = this.subs.length;\n  for (var i = 0; i < subsLength; i++) {\n    var sub = this.subs.shift();\n    sub.destroy();\n  }\n  this.packetBuffer = [];\n  this.encoding = false;\n  this.lastPing = null;\n  this.decoder.destroy();\n};\n\n/**\n * Close the current socket.\n *\n * @api private\n */\n\nManager.prototype.close = Manager.prototype.disconnect = function () {\n  debug('disconnect');\n  this.skipReconnect = true;\n  this.reconnecting = false;\n  if ('opening' === this.readyState) {\n    // `onclose` will not fire because\n    // an open event never happened\n    this.cleanup();\n  }\n  this.backoff.reset();\n  this.readyState = 'closed';\n  if (this.engine) this.engine.close();\n};\n\n/**\n * Called upon engine close.\n *\n * @api private\n */\n\nManager.prototype.onclose = function (reason) {\n  debug('onclose');\n  this.cleanup();\n  this.backoff.reset();\n  this.readyState = 'closed';\n  this.emit('close', reason);\n  if (this._reconnection && !this.skipReconnect) {\n    this.reconnect();\n  }\n};\n\n/**\n * Attempt a reconnection.\n *\n * @api private\n */\n\nManager.prototype.reconnect = function () {\n  if (this.reconnecting || this.skipReconnect) return this;\n  var self = this;\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\n    debug('reconnect failed');\n    this.backoff.reset();\n    this.emitAll('reconnect_failed');\n    this.reconnecting = false;\n  } else {\n    var delay = this.backoff.duration();\n    debug('will wait %dms before reconnect attempt', delay);\n    this.reconnecting = true;\n    var timer = setTimeout(function () {\n      if (self.skipReconnect) return;\n      debug('attempting reconnect');\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\n      self.emitAll('reconnecting', self.backoff.attempts);\n\n      // check again for the case socket closed in above events\n      if (self.skipReconnect) return;\n      self.open(function (err) {\n        if (err) {\n          debug('reconnect attempt error');\n          self.reconnecting = false;\n          self.reconnect();\n          self.emitAll('reconnect_error', err.data);\n        } else {\n          debug('reconnect success');\n          self.onreconnect();\n        }\n      });\n    }, delay);\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n};\n\n/**\n * Called upon successful reconnect.\n *\n * @api private\n */\n\nManager.prototype.onreconnect = function () {\n  var attempt = this.backoff.attempts;\n  this.reconnecting = false;\n  this.backoff.reset();\n  this.updateSocketIds();\n  this.emitAll('reconnect', attempt);\n};","map":{"version":3,"names":["eio","require","Socket","Emitter","parser","on","bind","debug","indexOf","Backoff","has","Object","prototype","hasOwnProperty","module","exports","Manager","uri","opts","undefined","path","nsps","subs","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","readyState","connecting","lastPing","encoding","packetBuffer","encoder","Encoder","decoder","Decoder","autoConnect","open","emitAll","emit","apply","arguments","nsp","call","updateSocketIds","id","engine","v","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","reconnecting","attempts","reconnect","connect","fn","socket","self","skipReconnect","openSub","onopen","errorSub","data","cleanup","err","Error","timer","setTimeout","destroy","close","push","clearTimeout","onping","Date","onpong","ondata","add","ondecoded","packet","onerror","onConnecting","index","splice","query","type","encode","encodedPackets","i","write","options","processPacketQueue","pack","shift","subsLength","sub","disconnect","reset","onclose","reason","delay","duration","onreconnect","attempt"],"sources":["C:/Users/gorapalli raju/chat-app/client/node_modules/socket.io-client/lib/manager.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar eio = require('engine.io-client');\nvar Socket = require('./socket');\nvar Emitter = require('component-emitter');\nvar parser = require('socket.io-parser');\nvar on = require('./on');\nvar bind = require('component-bind');\nvar debug = require('debug')('socket.io-client:manager');\nvar indexOf = require('indexof');\nvar Backoff = require('backo2');\n\n/**\n * IE6+ hasOwnProperty\n */\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Module exports\n */\n\nmodule.exports = Manager;\n\n/**\n * `Manager` constructor.\n *\n * @param {String} engine instance or engine uri/opts\n * @param {Object} options\n * @api public\n */\n\nfunction Manager (uri, opts) {\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\n  if (uri && ('object' === typeof uri)) {\n    opts = uri;\n    uri = undefined;\n  }\n  opts = opts || {};\n\n  opts.path = opts.path || '/socket.io';\n  this.nsps = {};\n  this.subs = [];\n  this.opts = opts;\n  this.reconnection(opts.reconnection !== false);\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\n  this.backoff = new Backoff({\n    min: this.reconnectionDelay(),\n    max: this.reconnectionDelayMax(),\n    jitter: this.randomizationFactor()\n  });\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n  this.readyState = 'closed';\n  this.uri = uri;\n  this.connecting = [];\n  this.lastPing = null;\n  this.encoding = false;\n  this.packetBuffer = [];\n  this.encoder = new parser.Encoder();\n  this.decoder = new parser.Decoder();\n  this.autoConnect = opts.autoConnect !== false;\n  if (this.autoConnect) this.open();\n}\n\n/**\n * Propagate given event to sockets and emit on `this`\n *\n * @api private\n */\n\nManager.prototype.emitAll = function () {\n  this.emit.apply(this, arguments);\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\n    }\n  }\n};\n\n/**\n * Update `socket.id` of all sockets\n *\n * @api private\n */\n\nManager.prototype.updateSocketIds = function () {\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].id = this.engine.id;\n    }\n  }\n};\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Manager.prototype);\n\n/**\n * Sets the `reconnection` config.\n *\n * @param {Boolean} true/false if it should automatically reconnect\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnection = function (v) {\n  if (!arguments.length) return this._reconnection;\n  this._reconnection = !!v;\n  return this;\n};\n\n/**\n * Sets the reconnection attempts config.\n *\n * @param {Number} max reconnection attempts before giving up\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionAttempts = function (v) {\n  if (!arguments.length) return this._reconnectionAttempts;\n  this._reconnectionAttempts = v;\n  return this;\n};\n\n/**\n * Sets the delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelay = function (v) {\n  if (!arguments.length) return this._reconnectionDelay;\n  this._reconnectionDelay = v;\n  this.backoff && this.backoff.setMin(v);\n  return this;\n};\n\nManager.prototype.randomizationFactor = function (v) {\n  if (!arguments.length) return this._randomizationFactor;\n  this._randomizationFactor = v;\n  this.backoff && this.backoff.setJitter(v);\n  return this;\n};\n\n/**\n * Sets the maximum delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelayMax = function (v) {\n  if (!arguments.length) return this._reconnectionDelayMax;\n  this._reconnectionDelayMax = v;\n  this.backoff && this.backoff.setMax(v);\n  return this;\n};\n\n/**\n * Sets the connection timeout. `false` to disable\n *\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.timeout = function (v) {\n  if (!arguments.length) return this._timeout;\n  this._timeout = v;\n  return this;\n};\n\n/**\n * Starts trying to reconnect if reconnection is enabled and we have not\n * started reconnecting yet\n *\n * @api private\n */\n\nManager.prototype.maybeReconnectOnOpen = function () {\n  // Only try to reconnect if it's the first time we're connecting\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\n    // keeps reconnection from firing twice for the same reconnection loop\n    this.reconnect();\n  }\n};\n\n/**\n * Sets the current transport `socket`.\n *\n * @param {Function} optional, callback\n * @return {Manager} self\n * @api public\n */\n\nManager.prototype.open =\nManager.prototype.connect = function (fn, opts) {\n  debug('readyState %s', this.readyState);\n  if (~this.readyState.indexOf('open')) return this;\n\n  debug('opening %s', this.uri);\n  this.engine = eio(this.uri, this.opts);\n  var socket = this.engine;\n  var self = this;\n  this.readyState = 'opening';\n  this.skipReconnect = false;\n\n  // emit `open`\n  var openSub = on(socket, 'open', function () {\n    self.onopen();\n    fn && fn();\n  });\n\n  // emit `connect_error`\n  var errorSub = on(socket, 'error', function (data) {\n    debug('connect_error');\n    self.cleanup();\n    self.readyState = 'closed';\n    self.emitAll('connect_error', data);\n    if (fn) {\n      var err = new Error('Connection error');\n      err.data = data;\n      fn(err);\n    } else {\n      // Only do this if there is no fn to handle the error\n      self.maybeReconnectOnOpen();\n    }\n  });\n\n  // emit `connect_timeout`\n  if (false !== this._timeout) {\n    var timeout = this._timeout;\n    debug('connect attempt will timeout after %d', timeout);\n\n    // set timer\n    var timer = setTimeout(function () {\n      debug('connect attempt timed out after %d', timeout);\n      openSub.destroy();\n      socket.close();\n      socket.emit('error', 'timeout');\n      self.emitAll('connect_timeout', timeout);\n    }, timeout);\n\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n\n  this.subs.push(openSub);\n  this.subs.push(errorSub);\n\n  return this;\n};\n\n/**\n * Called upon transport open.\n *\n * @api private\n */\n\nManager.prototype.onopen = function () {\n  debug('open');\n\n  // clear old subs\n  this.cleanup();\n\n  // mark as open\n  this.readyState = 'open';\n  this.emit('open');\n\n  // add new subs\n  var socket = this.engine;\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\n  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\n  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\n};\n\n/**\n * Called upon a ping.\n *\n * @api private\n */\n\nManager.prototype.onping = function () {\n  this.lastPing = new Date();\n  this.emitAll('ping');\n};\n\n/**\n * Called upon a packet.\n *\n * @api private\n */\n\nManager.prototype.onpong = function () {\n  this.emitAll('pong', new Date() - this.lastPing);\n};\n\n/**\n * Called with data.\n *\n * @api private\n */\n\nManager.prototype.ondata = function (data) {\n  this.decoder.add(data);\n};\n\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\nManager.prototype.ondecoded = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon socket error.\n *\n * @api private\n */\n\nManager.prototype.onerror = function (err) {\n  debug('error', err);\n  this.emitAll('error', err);\n};\n\n/**\n * Creates a new socket for the given `nsp`.\n *\n * @return {Socket}\n * @api public\n */\n\nManager.prototype.socket = function (nsp, opts) {\n  var socket = this.nsps[nsp];\n  if (!socket) {\n    socket = new Socket(this, nsp, opts);\n    this.nsps[nsp] = socket;\n    var self = this;\n    socket.on('connecting', onConnecting);\n    socket.on('connect', function () {\n      socket.id = self.engine.id;\n    });\n\n    if (this.autoConnect) {\n      // manually call here since connecting evnet is fired before listening\n      onConnecting();\n    }\n  }\n\n  function onConnecting () {\n    if (!~indexOf(self.connecting, socket)) {\n      self.connecting.push(socket);\n    }\n  }\n\n  return socket;\n};\n\n/**\n * Called upon a socket close.\n *\n * @param {Socket} socket\n */\n\nManager.prototype.destroy = function (socket) {\n  var index = indexOf(this.connecting, socket);\n  if (~index) this.connecting.splice(index, 1);\n  if (this.connecting.length) return;\n\n  this.close();\n};\n\n/**\n * Writes a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nManager.prototype.packet = function (packet) {\n  debug('writing packet %j', packet);\n  var self = this;\n  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\n\n  if (!self.encoding) {\n    // encode, then write to engine with result\n    self.encoding = true;\n    this.encoder.encode(packet, function (encodedPackets) {\n      for (var i = 0; i < encodedPackets.length; i++) {\n        self.engine.write(encodedPackets[i], packet.options);\n      }\n      self.encoding = false;\n      self.processPacketQueue();\n    });\n  } else { // add packet to the queue\n    self.packetBuffer.push(packet);\n  }\n};\n\n/**\n * If packet buffer is non-empty, begins encoding the\n * next packet in line.\n *\n * @api private\n */\n\nManager.prototype.processPacketQueue = function () {\n  if (this.packetBuffer.length > 0 && !this.encoding) {\n    var pack = this.packetBuffer.shift();\n    this.packet(pack);\n  }\n};\n\n/**\n * Clean up transport subscriptions and packet buffer.\n *\n * @api private\n */\n\nManager.prototype.cleanup = function () {\n  debug('cleanup');\n\n  var subsLength = this.subs.length;\n  for (var i = 0; i < subsLength; i++) {\n    var sub = this.subs.shift();\n    sub.destroy();\n  }\n\n  this.packetBuffer = [];\n  this.encoding = false;\n  this.lastPing = null;\n\n  this.decoder.destroy();\n};\n\n/**\n * Close the current socket.\n *\n * @api private\n */\n\nManager.prototype.close =\nManager.prototype.disconnect = function () {\n  debug('disconnect');\n  this.skipReconnect = true;\n  this.reconnecting = false;\n  if ('opening' === this.readyState) {\n    // `onclose` will not fire because\n    // an open event never happened\n    this.cleanup();\n  }\n  this.backoff.reset();\n  this.readyState = 'closed';\n  if (this.engine) this.engine.close();\n};\n\n/**\n * Called upon engine close.\n *\n * @api private\n */\n\nManager.prototype.onclose = function (reason) {\n  debug('onclose');\n\n  this.cleanup();\n  this.backoff.reset();\n  this.readyState = 'closed';\n  this.emit('close', reason);\n\n  if (this._reconnection && !this.skipReconnect) {\n    this.reconnect();\n  }\n};\n\n/**\n * Attempt a reconnection.\n *\n * @api private\n */\n\nManager.prototype.reconnect = function () {\n  if (this.reconnecting || this.skipReconnect) return this;\n\n  var self = this;\n\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\n    debug('reconnect failed');\n    this.backoff.reset();\n    this.emitAll('reconnect_failed');\n    this.reconnecting = false;\n  } else {\n    var delay = this.backoff.duration();\n    debug('will wait %dms before reconnect attempt', delay);\n\n    this.reconnecting = true;\n    var timer = setTimeout(function () {\n      if (self.skipReconnect) return;\n\n      debug('attempting reconnect');\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\n      self.emitAll('reconnecting', self.backoff.attempts);\n\n      // check again for the case socket closed in above events\n      if (self.skipReconnect) return;\n\n      self.open(function (err) {\n        if (err) {\n          debug('reconnect attempt error');\n          self.reconnecting = false;\n          self.reconnect();\n          self.emitAll('reconnect_error', err.data);\n        } else {\n          debug('reconnect success');\n          self.onreconnect();\n        }\n      });\n    }, delay);\n\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n};\n\n/**\n * Called upon successful reconnect.\n *\n * @api private\n */\n\nManager.prototype.onreconnect = function () {\n  var attempt = this.backoff.attempts;\n  this.reconnecting = false;\n  this.backoff.reset();\n  this.updateSocketIds();\n  this.emitAll('reconnect', attempt);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}