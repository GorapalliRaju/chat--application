{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gorapalli raju\\\\chat-app\\\\client\\\\src\\\\components\\\\login\\\\login.js\",\n  _s = $RefreshSig$();\n// Login.js\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\n\n// ... (other imports and code)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = () => {\n    // Add your authentication logic here\n    // For simplicity, let's assume the login is successful if the username and password are not empty\n\n    if (username && password) {\n      // Redirect to the join page upon successful login\n      navigate('/join');\n    } else {\n      setError('Invalid credentials');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"PRk3rkn/Zq+a3Ceqt4taaWXn0UQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Link","useNavigate","jsxDEV","_jsxDEV","Login","_s","username","setUsername","password","setPassword","error","setError","navigate","handleLogin","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gorapalli raju/chat-app/client/src/components/login/login.js"],"sourcesContent":["// Login.js\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\n// ... (other imports and code)\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = () => {\r\n    // Add your authentication logic here\r\n    // For simplicity, let's assume the login is successful if the username and password are not empty\r\n\r\n    if (username && password) {\r\n      // Redirect to the join page upon successful login\r\n      navigate('/join');\r\n    } else {\r\n      setError('Invalid credentials');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* ... (other JSX code) */}\r\n      <button onClick={handleLogin}>Login</button>\r\n      {/* ... (other JSX code) */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;;AAEpD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMa,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA;;IAEA,IAAIP,QAAQ,IAAIE,QAAQ,EAAE;MACxB;MACAI,QAAQ,CAAC,OAAO,CAAC;IACnB,CAAC,MAAM;MACLD,QAAQ,CAAC,qBAAqB,CAAC;IACjC;EACF,CAAC;EAED,oBACER,OAAA;IAAAW,QAAA,eAEEX,OAAA;MAAQY,OAAO,EAAEF,WAAY;MAAAC,QAAA,EAAC;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEzC,CAAC;AAEV,CAAC;AAACd,EAAA,CA1BID,KAAK;EAAA,QAKQH,WAAW;AAAA;AAAAmB,EAAA,GALxBhB,KAAK;AA4BX,eAAeA,KAAK;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}