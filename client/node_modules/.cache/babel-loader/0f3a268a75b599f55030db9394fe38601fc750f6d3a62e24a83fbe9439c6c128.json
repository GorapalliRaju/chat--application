{"ast":null,"code":"/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\nvar XHR = require('./polling-xhr');\nvar JSONP = require('./polling-jsonp');\nvar websocket = require('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling(opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}","map":{"version":3,"names":["XMLHttpRequest","require","XHR","JSONP","websocket","exports","polling","opts","xhr","xd","xs","jsonp","global","location","isSSL","protocol","port","hostname","secure","xdomain","xscheme","forceJSONP","Error"],"sources":["C:/Users/gorapalli raju/chat-app/client/node_modules/engine.io-client/lib/transports/index.js"],"sourcesContent":["/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\nvar XHR = require('./polling-xhr');\nvar JSONP = require('./polling-jsonp');\nvar websocket = require('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling (opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAClD,IAAIC,GAAG,GAAGD,OAAO,CAAC,eAAe,CAAC;AAClC,IAAIE,KAAK,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AACtC,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA;;AAEAI,OAAO,CAACC,OAAO,GAAGA,OAAO;AACzBD,OAAO,CAACD,SAAS,GAAGA,SAAS;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,OAAOA,CAAEC,IAAI,EAAE;EACtB,IAAIC,GAAG;EACP,IAAIC,EAAE,GAAG,KAAK;EACd,IAAIC,EAAE,GAAG,KAAK;EACd,IAAIC,KAAK,GAAG,KAAK,KAAKJ,IAAI,CAACI,KAAK;EAEhC,IAAIC,MAAM,CAACC,QAAQ,EAAE;IACnB,IAAIC,KAAK,GAAG,QAAQ,KAAKD,QAAQ,CAACE,QAAQ;IAC1C,IAAIC,IAAI,GAAGH,QAAQ,CAACG,IAAI;;IAExB;IACA,IAAI,CAACA,IAAI,EAAE;MACTA,IAAI,GAAGF,KAAK,GAAG,GAAG,GAAG,EAAE;IACzB;IAEAL,EAAE,GAAGF,IAAI,CAACU,QAAQ,KAAKJ,QAAQ,CAACI,QAAQ,IAAID,IAAI,KAAKT,IAAI,CAACS,IAAI;IAC9DN,EAAE,GAAGH,IAAI,CAACW,MAAM,KAAKJ,KAAK;EAC5B;EAEAP,IAAI,CAACY,OAAO,GAAGV,EAAE;EACjBF,IAAI,CAACa,OAAO,GAAGV,EAAE;EACjBF,GAAG,GAAG,IAAIR,cAAc,CAACO,IAAI,CAAC;EAE9B,IAAI,MAAM,IAAIC,GAAG,IAAI,CAACD,IAAI,CAACc,UAAU,EAAE;IACrC,OAAO,IAAInB,GAAG,CAACK,IAAI,CAAC;EACtB,CAAC,MAAM;IACL,IAAI,CAACI,KAAK,EAAE,MAAM,IAAIW,KAAK,CAAC,gBAAgB,CAAC;IAC7C,OAAO,IAAInB,KAAK,CAACI,IAAI,CAAC;EACxB;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}