{"ast":null,"code":"/*import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useLocation } from 'react-router-dom'; // Import useLocation from react-router-dom\r\nfunction Chat(){\r\n  const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [message,setMessage]=useState('');\r\n    const [messages,setMessages]=useState([]);\r\n  const location=useLocation();\r\n  useEffect(()=>{\r\n    const data = new URLSearchParams(location.search);\r\n    const name = data.get('name');\r\n    const room = data.get('room');\r\nconsole.log(name);\r\nconsole.log(room);\r\n//const socket=io('localhost:5000');\r\nconst socket = io('http://localhost:5000');\r\n  console.log(socket);\r\nsetName(name);\r\n    setRoom(room);\r\n    socket.emit('join',{ name,room });\r\n    \r\n    //socket.emit('join',{ name,room },({error})=>{\r\n    //alert(error);\r\n  //  });\r\n  \r\n   //this is the termination of first useeffect hook\r\n   return ()=>{\r\n    socket.emit('disconnect');//name same as that is present in backend.(see index.js in server folder)\r\n    socket.off();\r\n   }\r\n  },[location.search])\r\n  useEffect(()=>{\r\n    const socket = io('http://localhost:5000');\r\n    socket.on('message',(message)=>{\r\n      setMessages([...messages,message]);\r\n      console.log(message);\r\n    })\r\n  },[messages]);\r\n  const socket = io('http://localhost:5000');\r\n  const sendMessage=(event)=>{\r\n    event.preventDefault();//autometically refreshes the page\r\n    if(messages){\r\n      socket.emit('sendMessage',messages,()=>setMessage(''));\r\n    }\r\n  }\r\n  console.log(message,messages);\r\n return (\r\n  <div className=\"outerContainer\">\r\n  <div className=\"innerContainer\">\r\n  <input value={message}\r\n   onChange={(event)=>setMessage(event.target.value)}\r\n   onKeyPress={(event)=>event.key==='Enter'?sendMessage(event):null}\r\n   />\r\n  </div>\r\n  </div>\r\n );\r\n}\r\nexport default Chat;*/\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction Chat() {\r\n  const [name, setName] = useState('');\r\n  const [room, setRoom] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const data = new URLSearchParams(location.search);\r\n    const name = data.get('name');\r\n    const room = data.get('room');\r\n    console.log(name);\r\n    console.log(room);\r\n\r\n    const socket = io('http://localhost:5000');\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    socket.emit('join', { name, room });\r\n\r\n    return () => {\r\n      socket.disconnect(); // Use 'disconnect' to disconnect the socket\r\n    };\r\n  }, [location.search]);\r\n\r\n  useEffect(() => {\r\n    const socket = io('http://localhost:5000');\r\n\r\n    // Use a callback function to update state based on previous state\r\n    socket.on('message', (message) => {\r\n      setMessages(prevMessages => [...prevMessages, message]);\r\n      console.log(message);\r\n    });\r\n\r\n    // Cleanup the socket event listener when component unmounts\r\n    return () => {\r\n      socket.disconnect();\r\n      socket.off('message');\r\n    };\r\n  }, []); // Add an empty dependency array to run this effect only once\r\n\r\n  const socket = io('http://localhost:5000'); // You don't need this here, it's already defined in the previous useEffect\r\n\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n    if (message) {\r\n      socket.emit('sendMessage', message, () => setMessage(''));\r\n    }\r\n  };\r\n\r\n  console.log(message, messages);\r\n\r\n  return (\r\n    <div className=\"outerContainer\">\r\n      <div className=\"innerContainer\">\r\n        <input\r\n          value={message}\r\n          onChange={(event) => setMessage(event.target.value)}\r\n          onKeyPress={(event) => event.key === 'Enter' ? sendMessage(event) : null}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n*/","map":{"version":3,"names":[],"sources":["C:/Users/gorapalli raju/chat-app/client/src/components/chat/chat.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useLocation } from 'react-router-dom'; // Import useLocation from react-router-dom\r\nfunction Chat(){\r\n  const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [message,setMessage]=useState('');\r\n    const [messages,setMessages]=useState([]);\r\n  const location=useLocation();\r\n  useEffect(()=>{\r\n    const data = new URLSearchParams(location.search);\r\n    const name = data.get('name');\r\n    const room = data.get('room');\r\nconsole.log(name);\r\nconsole.log(room);\r\n//const socket=io('localhost:5000');\r\nconst socket = io('http://localhost:5000');\r\n  console.log(socket);\r\nsetName(name);\r\n    setRoom(room);\r\n    socket.emit('join',{ name,room });\r\n    \r\n    //socket.emit('join',{ name,room },({error})=>{\r\n    //alert(error);\r\n  //  });\r\n  \r\n   //this is the termination of first useeffect hook\r\n   return ()=>{\r\n    socket.emit('disconnect');//name same as that is present in backend.(see index.js in server folder)\r\n    socket.off();\r\n   }\r\n  },[location.search])\r\n  useEffect(()=>{\r\n    const socket = io('http://localhost:5000');\r\n    socket.on('message',(message)=>{\r\n      setMessages([...messages,message]);\r\n      console.log(message);\r\n    })\r\n  },[messages]);\r\n  const socket = io('http://localhost:5000');\r\n  const sendMessage=(event)=>{\r\n    event.preventDefault();//autometically refreshes the page\r\n    if(messages){\r\n      socket.emit('sendMessage',messages,()=>setMessage(''));\r\n    }\r\n  }\r\n  console.log(message,messages);\r\n return (\r\n  <div className=\"outerContainer\">\r\n  <div className=\"innerContainer\">\r\n  <input value={message}\r\n   onChange={(event)=>setMessage(event.target.value)}\r\n   onKeyPress={(event)=>event.key==='Enter'?sendMessage(event):null}\r\n   />\r\n  </div>\r\n  </div>\r\n );\r\n}\r\nexport default Chat;*/\r\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction Chat() {\r\n  const [name, setName] = useState('');\r\n  const [room, setRoom] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const data = new URLSearchParams(location.search);\r\n    const name = data.get('name');\r\n    const room = data.get('room');\r\n    console.log(name);\r\n    console.log(room);\r\n\r\n    const socket = io('http://localhost:5000');\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    socket.emit('join', { name, room });\r\n\r\n    return () => {\r\n      socket.disconnect(); // Use 'disconnect' to disconnect the socket\r\n    };\r\n  }, [location.search]);\r\n\r\n  useEffect(() => {\r\n    const socket = io('http://localhost:5000');\r\n\r\n    // Use a callback function to update state based on previous state\r\n    socket.on('message', (message) => {\r\n      setMessages(prevMessages => [...prevMessages, message]);\r\n      console.log(message);\r\n    });\r\n\r\n    // Cleanup the socket event listener when component unmounts\r\n    return () => {\r\n      socket.disconnect();\r\n      socket.off('message');\r\n    };\r\n  }, []); // Add an empty dependency array to run this effect only once\r\n\r\n  const socket = io('http://localhost:5000'); // You don't need this here, it's already defined in the previous useEffect\r\n\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n    if (message) {\r\n      socket.emit('sendMessage', message, () => setMessage(''));\r\n    }\r\n  };\r\n\r\n  console.log(message, messages);\r\n\r\n  return (\r\n    <div className=\"outerContainer\">\r\n      <div className=\"innerContainer\">\r\n        <input\r\n          value={message}\r\n          onChange={(event) => setMessage(event.target.value)}\r\n          onKeyPress={(event) => event.key === 'Enter' ? sendMessage(event) : null}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n*/\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}